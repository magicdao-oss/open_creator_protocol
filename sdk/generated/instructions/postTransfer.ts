/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category PostTransfer
 * @category generated
 */
export const postTransferStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'PostTransferInstructionArgs'
)
/**
 * Accounts required by the _postTransfer_ instruction
 *
 * @property [_writable_] accountBalances
 * @property [_writable_] collector
 * @property [] instructions
 * @category Instructions
 * @category PostTransfer
 * @category generated
 */
export type PostTransferInstructionAccounts = {
  accountBalances: web3.PublicKey
  collector: web3.PublicKey
  instructions: web3.PublicKey
}

export const postTransferInstructionDiscriminator = [
  195, 252, 43, 202, 149, 119, 175, 84,
]

/**
 * Creates a _PostTransfer_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category PostTransfer
 * @category generated
 */
export function createPostTransferInstruction(
  accounts: PostTransferInstructionAccounts,
  programId = new web3.PublicKey('creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez')
) {
  const [data] = postTransferStruct.serialize({
    instructionDiscriminator: postTransferInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.accountBalances,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.collector,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.instructions,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
