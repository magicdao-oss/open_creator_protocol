/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category PreTransfer
 * @category generated
 */
export const preTransferStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'PreTransferInstructionArgs'
)
/**
 * Accounts required by the _preTransfer_ instruction
 *
 * @property [_writable_] accountBalances
 * @property [_writable_, **signer**] payer
 * @property [] instructions
 * @category Instructions
 * @category PreTransfer
 * @category generated
 */
export type PreTransferInstructionAccounts = {
  accountBalances: web3.PublicKey
  payer: web3.PublicKey
  instructions: web3.PublicKey
}

export const preTransferInstructionDiscriminator = [
  158, 85, 53, 202, 155, 118, 19, 228,
]

/**
 * Creates a _PreTransfer_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category PreTransfer
 * @category generated
 */
export function createPreTransferInstruction(
  accounts: PreTransferInstructionAccounts,
  programId = new web3.PublicKey('creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez')
) {
  const [data] = preTransferStruct.serialize({
    instructionDiscriminator: preTransferInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.accountBalances,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.instructions,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
