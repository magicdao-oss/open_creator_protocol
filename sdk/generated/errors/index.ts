/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidMint: 'Invalid mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidMint'
  constructor() {
    super('Invalid mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidMintError())
createErrorFromNameLookup.set('InvalidMint', () => new InvalidMintError())

/**
 * InvalidCollector: 'Invalid collector address'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCollectorError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidCollector'
  constructor() {
    super('Invalid collector address')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCollectorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidCollectorError())
createErrorFromNameLookup.set(
  'InvalidCollector',
  () => new InvalidCollectorError()
)

/**
 * InvalidAuthority: 'Invalid authority address'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidAuthority'
  constructor() {
    super('Invalid authority address')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidAuthorityError())
createErrorFromNameLookup.set(
  'InvalidAuthority',
  () => new InvalidAuthorityError()
)

/**
 * InvalidMintManager: 'Invalid mint manager'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintManagerError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidMintManager'
  constructor() {
    super('Invalid mint manager')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintManagerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidMintManagerError())
createErrorFromNameLookup.set(
  'InvalidMintManager',
  () => new InvalidMintManagerError()
)

/**
 * InvlaidHolderTokenAccount: 'Invalid holder token account'
 *
 * @category Errors
 * @category generated
 */
export class InvlaidHolderTokenAccountError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvlaidHolderTokenAccount'
  constructor() {
    super('Invalid holder token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvlaidHolderTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1774,
  () => new InvlaidHolderTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvlaidHolderTokenAccount',
  () => new InvlaidHolderTokenAccountError()
)

/**
 * InvalidTargetTokenAccount: 'Invalid target token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTargetTokenAccountError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidTargetTokenAccount'
  constructor() {
    super('Invalid target token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTargetTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1775,
  () => new InvalidTargetTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidTargetTokenAccount',
  () => new InvalidTargetTokenAccountError()
)

/**
 * InvalidCloseTokenAccount: 'Invalid token account to close'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCloseTokenAccountError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InvalidCloseTokenAccount'
  constructor() {
    super('Invalid token account to close')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCloseTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidCloseTokenAccountError())
createErrorFromNameLookup.set(
  'InvalidCloseTokenAccount',
  () => new InvalidCloseTokenAccountError()
)

/**
 * InvalidHolderTokenAccount: 'Invalid holder token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidHolderTokenAccountError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'InvalidHolderTokenAccount'
  constructor() {
    super('Invalid holder token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidHolderTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1777,
  () => new InvalidHolderTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidHolderTokenAccount',
  () => new InvalidHolderTokenAccountError()
)

/**
 * InvalidRuleset: 'Invalid ruleset'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRulesetError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidRuleset'
  constructor() {
    super('Invalid ruleset')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRulesetError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidRulesetError())
createErrorFromNameLookup.set('InvalidRuleset', () => new InvalidRulesetError())

/**
 * InvalidPreTransferInstruction: 'Invalid pre transfer instruction'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPreTransferInstructionError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'InvalidPreTransferInstruction'
  constructor() {
    super('Invalid pre transfer instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPreTransferInstructionError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1779,
  () => new InvalidPreTransferInstructionError()
)
createErrorFromNameLookup.set(
  'InvalidPreTransferInstruction',
  () => new InvalidPreTransferInstructionError()
)

/**
 * InvalidPostTransferInstruction: 'Invalid post transfer instruction'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPostTransferInstructionError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidPostTransferInstruction'
  constructor() {
    super('Invalid post transfer instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPostTransferInstructionError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177a,
  () => new InvalidPostTransferInstructionError()
)
createErrorFromNameLookup.set(
  'InvalidPostTransferInstruction',
  () => new InvalidPostTransferInstructionError()
)

/**
 * ProgramDisallowed: 'Disallowed program included in transfer'
 *
 * @category Errors
 * @category generated
 */
export class ProgramDisallowedError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'ProgramDisallowed'
  constructor() {
    super('Disallowed program included in transfer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProgramDisallowedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new ProgramDisallowedError())
createErrorFromNameLookup.set(
  'ProgramDisallowed',
  () => new ProgramDisallowedError()
)

/**
 * ProgramNotAllowed: 'Program not allowed in allowed programs to transfer'
 *
 * @category Errors
 * @category generated
 */
export class ProgramNotAllowedError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'ProgramNotAllowed'
  constructor() {
    super('Program not allowed in allowed programs to transfer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProgramNotAllowedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new ProgramNotAllowedError())
createErrorFromNameLookup.set(
  'ProgramNotAllowed',
  () => new ProgramNotAllowedError()
)

/**
 * UnknownAccount: 'Unknown account found in instruction'
 *
 * @category Errors
 * @category generated
 */
export class UnknownAccountError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'UnknownAccount'
  constructor() {
    super('Unknown account found in instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnknownAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new UnknownAccountError())
createErrorFromNameLookup.set('UnknownAccount', () => new UnknownAccountError())

/**
 * AccountNotFound: 'Account not found in instruction'
 *
 * @category Errors
 * @category generated
 */
export class AccountNotFoundError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'AccountNotFound'
  constructor() {
    super('Account not found in instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AccountNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new AccountNotFoundError())
createErrorFromNameLookup.set(
  'AccountNotFound',
  () => new AccountNotFoundError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
